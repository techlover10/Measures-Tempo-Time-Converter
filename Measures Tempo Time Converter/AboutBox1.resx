<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAKioAAAAACACwDAAAFgAAACgAAAAqAAAAVAAAAAEACAAAAAAAOAcAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAAAQEBAAMDAwAFBQUABgYGAAkJCQAKCgoADAwMAA4ODgAQEBAAERERABQUFAAVFRUAFxcXABgY
        GAAaGhoAHBwcACEhIQAjIyMAJSUlACYmJgAnJycAKCgoACoqKgAuLi4AMTExADIyMgA1NTUANzc3ADo6
        OgA+Pj4APz8/AEBAQABBQUEAQ0NDAEVFRQBGRkYATExMAE5OTgBPT08AUVFRAFNTUwBVVVUAWFhYAF5e
        XgBfX18AYGBgAGFhYQBjY2MAZGRkAGVlZQBmZmYAaGhoAGpqagBsbGwAb29vAHZ2dgB4eHgAenp6AHx8
        fACAgIAAgYGBAIWFhQCIiIgAioqKAIyMjACNjY0Ajo6OAI+PjwCRkZEAmJiYAJycnACdnZ0An5+fAKGh
        oQCkpKQApqamAKioqACqqqoAr6+vALOzswC0tLQAtra2ALi4uAC6uroAv7+/AMbGxgDIyMgAycnJAMrK
        ygDLy8sAzc3NAM/PzwDS0tIA09PTANXV1QDW1tYA2NjYANnZ2QDa2toA29vbANzc3ADd3d0A39/fAOTk
        5ADo6OgA6enpAOrq6gDr6+sA7e3tAO/v7wDx8fEA8vLyAPT09AD29vYA9/f3APj4+AD5+fkA+/v7AP39
        /QD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAgILFxICAgICAgICEAAAAAACAgICAgICAgICAgICAgICAgICAgICAgICAAACAnd2bAICAgIC
        AhBldnZFAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAICd3ZsAgICAgIQZXZ2NgICAgICAgICAgIC
        AgICAgICAgICAgICAgICAgAAAgJ3dmwCAgICEGV2diwCAgICAgICAgICAgICAgICAgICAgICAgICAgIC
        AAACAnd2bAICAhBldnEiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAICd3ZsAgIQZXZxMRcX
        FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXEgICAgAAAgJ3dmwCEGV2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2
        dnZ2dnZ2dnZ2KQICAAACAnd2bAI7dnZ2dnZ2dnZ2dnZ2dnZ2eHh4eHh4dnZ2dnZ2dnZ2dnh4AgIAAAIC
        d3ZsAgJednZ4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgCAgAAAgJ3dmwCAhd2dmUHAgICAgIC
        AgICAgICAgICAgICAgICAgICAnh4eAICAAACAnd2bAICAjt2djsCAgICAgICAgICAgICAgICAgICAgIC
        AgICeHZ4AgIAAAICd3ZsAgICAlp2cRACAgICAgICAgICAgICAiUCAgICAgICAgJ4dngCAgAAAgJ3dmwC
        AgICEnF2SwICAgICAgICAgICAgISdhsCAgICAgICAnh2eAICAAACAnd2bAICAgICNnZ2HQICAgICAgIC
        AgICAgJBWgICAgICAgICeHZ4AgIAAAICd3ZsAgICAgICHR0SAgICAgICAgICAgICAgdsLAICAgICAgJ4
        dngCAgAAAgJ3dmwCAgICAgICAgICAgICAgIbAgICAgICAjZsBwICAgICAnh2eAICAAACAnd2bAICAgIC
        AgICAgICAgICHXESAgICAgICAlo+AgICAgICeHh4AgIAAAICd3ZsAgICAgICAgICAgICAgICTksCAgIC
        AgICHXESAiIsAgJ4eHgCAgAAAgJ3dmwCAgICAgICAgILMQICAgIScR0CAgICAgICTlRRWh0CAnh4eAIC
        AAACAnd2bAICAgICAgICAgtsIgICAgI+WgICAgICAgtLbDECAgICeHh4AgIAAAICd3ZsAgICAgICCwIC
        AjZeAgICAgdsLAICAgIpaEEHAgICAgJ4eHgCAgAAAgJ3dmwCAgICAhd2QQcCAl42AgICAjFsBwIiHRsS
        AgICAgICAnh4eAICAAACAnd2bAICAgICC3ZOZR0CImwLAgICAlpLUVobAgICAgICAgICeHh4AgIAAAIC
        d3ZsAhJaBwICdgcxbEEHTkECAgILTmwxAgICAgICAgICAgJ4eHgCAgAAAgJ3dmwCAlpBAgJxEAIQVGUs
        cRcCLGhBBwICAgICAgICAgICAnh4eAICAAACAnd2bAICG3YSAmUbAgICMWxoVAIlEgICAgICAgICAgIC
        AgICeHh4AgIAAAICd3ZsAgICS1QCViICAgICEFReCwICAgICAgICAgICAgICAgJ4dngCAgAAAgJ3dmwC
        AgILcSVUKQICAgICAgICAgICAgICAiJUVBsCAgICAnh4eAICAAACAnd2bAICAgI4ZUsxAgICAgICAgIC
        AgICAgICAl52XgcCAgICeHh4AgIAAAICd3ZsAgICAgdlZTsCAgICAgICAgICAgICAgICInZ2QQICAgJ4
        dngCAgAAAgJ3dmwCAgICAil2OwICAgICAgICAgICAgICAgICTnZ2IgICAnh2eAICAAACAnd2bAICAgIC
        AikCAgICAgICAgICAgICAgICAgIScXZlCwICeHZ4AgIAAAICd3ZsFxcXFxcXFxcXFxcXFxcXFxcXFxcX
        FxcXFxdLdnZHAgJ4dngCAgAAAgJ3dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnYlAnh2eAIC
        AAACAnd2dnh4dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ4eHZ2dkUCeHZ4AgIAAAICB3h4eHh4eHh4eHh4
        eHh4eHh4eHh4eHh4eHh4eHh4dnZHAgJ4dngCAgAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
        QXZ2RwICAnh2eAICAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAk52dkcCAgICeHh4AgIAAAIC
        AgICAgICAgICAgICAgICAgICAgICAgICAgdRdnZHAgICAgJ4eHgCAgAAAgICAgICAgICAgICAgICAgIC
        AgICAgICAgIQWnZ2RwICAgICAnh2eAICAAACAgICAgICAgICAgICAgICAgICAgICAgICEmV2dkcCAgIC
        AgICeHh4AgIAAAICAgICAgICAgICAgICAgICAgICAgICAgIAAAAAAAACAgICAgICAgICAgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>